#+TITLE: My (Potential) Game - Notes
* Game Details
** Name (as requested by Sebastian)
Save The Star Kingdom
** Levels
*** Boss
Some final boss - again, suggested by Sebastian
* Code structure
** Classes
*** Application Class
    Initializes and run the game
**** Methods
***** int init()
      This sets up GLFW and GLAD. This must be done before trying to compile any shaders
***** int run()
      This will just call the Renderer's loop method which handles inputs and renders images to the screen. Inputs should be handled by another class later
**** Members
***** GLFWwindow *window
      This will be used to initialize the window. It will then be sent to the Renderer as the canvas to render images onto
*** Renderer Class
    Renders the images onto the screen. It will receive a GLFWwindow object from the Application and render the images onto it
**** Methods
***** int loop()
      This will handle the input and render the images. It calls the processInput function
***** processInput()
      This is the function that actually processes the inputs
*** Model Class
    This class will be just like the Image class but in 3d. I don't really know how 3d models work, so I'll come back to documenting this later
**** Methods
     Perhaps the model will inherit from the Image class since it's basically the same thing, just with an added dimension. No need to re-write code for everything
**** Members
*** Image Class
    Each item that is displayed in the game will be an image class at its core. Depending on what it is will determine what kind of subclass it is
**** Methods
***** Constructor(s)
      There will be a base Image object that has no color associated with it. Just vertices. When this type of Image is rendered, it will have a black color (filled or just lines, or whatever other OpenGL options there are)
****** Just verts
****** Verts and color
****** Verts, color, and texture
***** Transformations
      I will probably make some global matrices to do these operations. It will be a waste of space to create one for every single object. Just modify the globals to perform what you need
****** Scale
****** Translation
****** Rotation
***** Mode
      Have an option to render the image in different modes, i.e. no fill or whatever. OpenGL has a few options
**** Members
     Each image will need some VBOs and VAOs associated with it. They will also probably need an EBO (if it's more than just a triangle)
***** VAO, VBO, EBO
      I think most Image objects will need all three object types since I believe that's how objects will a larger number of vertices work best using all three. 
***** Texture
      It will be possible to load a texture for an image. The Texture Class is described below
*** Texture class
    The Texture class will be used by the Image class if there is a texture to be loaded
**** Methods
***** Constructor
      The constructor will just load the texture that will be used by the Image class
**** Members
**** Menu Class
     The game will have menu items all over the place for when you start the game, pause the game, etc. This class will contain the details of the menu item. It will probably inherit from a parent ?Image? class
***** Members
****** Text
       The menu item will have some text to display
*** Shader Class
    Creates and combines the vertex and fragment shaders
*** Game State Class
    There will have to be a way to determine what state the game is in. Depending on the state will determine what's on the screen and how to update the items
